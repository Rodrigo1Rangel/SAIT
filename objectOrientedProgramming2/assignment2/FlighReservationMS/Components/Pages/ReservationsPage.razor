@page "/reservations"
@using FlighReservationMS.Data
@using System.Text.Json;

<!--  -------------------------------------  RESERVATION FINDER  ---------------------------------------  !-->
<h3>Reservation Finder</h3>
<div class="reservationFinder">
    <div>
        
        <label>Code:</label>
        <select class="reservationFinderInput" @onchange="DisplayCode">
                <option disable>Select code</option>
            @foreach (Reservation reservation in ReservationManager.ReservationList)
                {
                    <option>@reservation.ReservationCode</option>
                }
        </select>
    </div>

    <div>
        <label>Airline:</label>
        <select class="reservationFinderInput" @onchange="DisplayAirline">
        <option disable>Select airline</option>
        @foreach (Reservation reservation in ReservationManager.ReservationList)
        {
        <option>@reservation.Airline</option>
        }
        </select>
    </div>

    <div>
        <label>Name:</label>
        <select class="reservationFinderInput" @onchange="DisplayName">
            <option disable>Select name</option>
            @foreach (Reservation reservation in ReservationManager.ReservationList)
            {
                <option>@reservation.Name</option>
            }
        </select>
    </div>
    <button class="reservationFinderButton" @onclick="FindReservation">Find reservations</button>
</div>

<!--  ------------------------------------------  RESERVATIONS  ------------------------------------------  !-->

<h3>Reservations</h3>

<div class="reservationFinder">
    <select @onchange="SelectReservation" class="pageSize" id="dropdown" name="flightOptions">
        @foreach (Reservation reservation in ReservationManager.ReservationList)
        {
            <option >@reservation.ToString()</option>
            <!-- to do: assign other variables according to the selection -->
        }
    </select>
</div>

<!--  ------------------------------------------  RESERVE  ------------------------------------------  !-->

<h3>Reserve</h3>

<div>
    <label>Reservation code:</label>
    <input class="pageSize" placeholder="@_reservationCode" disabled />
    <label>Airline:</label>
    <input class="pageSize" placeholder="@_airline" disabled />
    <label>Day:</label>
    <input class="pageSize" placeholder="@_weekDayOfDeparture" disabled />
    <label>Time:</label>
    <input class="pageSize" placeholder="@_timeOfDeparture" disabled />
    <label>Cost:</label>
    <input class="pageSize" placeholder="@_cost" disabled />

    <!-- Modifications will only be allowed if an existing reservation was found in the system -->
    @if (isReservationModificationValid == true)
    {
        <label>Name:</label>
        <input class="pageSize" placeholder="@_name" />
        <label>Citizenship:</label>
        <input class="pageSize" placeholder="@_citizenship" />
        <label>Status:</label>
        <select class="pageSize" @onchange="SelectReservationStatus">
            <option value="active">Active</option>
            <option value="inactive">Inactive</option>
        </select>
    }
    else
    {
        <label>Name:</label>
        <input class="pageSize" placeholder="Name" disabled />
        <label>Citizenship:</label>
        <input class="pageSize" placeholder="Citizenship" disabled />
        <label>Status:</label>
        <select class="pageSize" disabled>
            <option value="activeStatus">Active</option>
            <option value="inactiveStatus">Inactive</option>
        </select>
    }
</div>
<button class="reserveButton" @onclick="SaveModifications">Save</button>


@code {
    private string? _flightCode= "";
    private string _airline = "";
    private string? _originAirport = "";
    private string? _destinationAirport;
    private string _weekDayOfDeparture = "";
    private string _timeOfDeparture = "";
    private ushort _seatsAvailable = 0;
    private double _cost = 0;
    private string _name = "";
    private string _citizenship = "";
    private string? _status = "";
    private string _reservationCode = "";
    Reservation? reservationEdited;
    bool isReservationModificationValid = false;

    // Flight that was selected from the dropdown list
    private string selectedReservation = "Any";

    // Assigning the searched values from the selector to variables
    private string selectedCode = "";
    private string selectedAirline = "";
    private string selectedName = "";
   
    private void DisplayCode(ChangeEventArgs e)
    {
        selectedCode = e.Value.ToString();
    }

    private void DisplayAirline(ChangeEventArgs e)
    {
        selectedAirline = e.Value.ToString();
    }

    private void DisplayName(ChangeEventArgs e)
    {
        selectedName = e.Value.ToString();
    }

    // STEP 0. Data digestion (RESERVATIONS)
    public ReservationsPage()
    {
        ReservationManager.LoadReservationListFromFile();
    }

    // STEP 1. Search for existing reservations:
    public void FindReservation()
    {
        ReservationManager.searchReservation(selectedCode, selectedAirline, selectedName);
    }

    // STEP 2. Selecting one of the existing reservations:

    private void ParseSelectedReservation(string selectedReservation)
    {
        if (!string.IsNullOrEmpty(selectedReservation) && selectedReservation != "Any")
        {
            string[] reservationArguments = selectedReservation.Split(',');

            _flightCode = reservationArguments[0].Trim();
            _airline = reservationArguments[1].Trim();
            _originAirport = reservationArguments[2].Trim();
            _destinationAirport = reservationArguments[3].Trim();
            _weekDayOfDeparture = reservationArguments[4].Trim();
            _timeOfDeparture = reservationArguments[5].Trim();
            ushort.TryParse(reservationArguments[6].Trim(), out ushort seatsAvailable);
            double.TryParse(reservationArguments[7].Trim(), out double cost);
            _seatsAvailable = seatsAvailable;
            _cost = cost;
            _name = reservationArguments[8].Trim();
            _citizenship = reservationArguments[9].Trim();
            _status = reservationArguments[10].Trim();
            _reservationCode = reservationArguments[11].Trim();

            isReservationModificationValid = true;
        }
    }

    public void SelectReservation(ChangeEventArgs e)
    {
        selectedReservation = e.Value.ToString();
        ParseSelectedReservation(selectedReservation);
    }

    // STEP 3. Creating a new reservations with the modifications and removing the original one

    public void SaveModifications()
    {
        // If a reservation was found in the search, it will delete the original one.
        // If a reservation was not found, it will just delete a nullable reference.
        {
            if (isReservationModificationValid == true)
            {
                reservationEdited = new Reservation(
                _flightCode,
                _airline,
                _originAirport,
                _destinationAirport,
                _weekDayOfDeparture,
                _timeOfDeparture,
                _seatsAvailable,
                _cost,
                _name,
                _citizenship,
                _status,
                _reservationCode);

                for (int i = 0; i < ReservationManager.ReservationList.Count; i++)
                {
                    if (ReservationManager.ReservationList[i].ReservationCode == reservationEdited.ReservationCode)
                    {
                        // Delete the Reservation prior modification, which has the same reservation code
                        ReservationManager.ReservationList.Remove(ReservationManager.ReservationList[i]);
                    }
                }

                // Add the new or edited Reservation
                ReservationManager.ReservationList.Add(reservationEdited);
                ReservationManager.WriteReservationListToFile();
            }
            else
            {
                AlertInvalidModificationAttempt();
            }
            // There is no way for the current program to delete a reservation.
        }
    }

    // to-do: to check the value
    private void SelectReservationStatus(ChangeEventArgs e)
    {
        _status = e.Value.ToString();
    }

    // =====================================  ALERTS =====================================

    public async Task AlertInvalidModificationAttempt()
    {
        await App.Current.MainPage.DisplayAlert("No Reservation Found", $"A valid reservation must be found in the system to perform modifications.", "OK");
    }
}
